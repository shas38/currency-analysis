{"version":3,"sources":["dateForm.tsx","profitTable.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["DateForm","props","react_default","a","createElement","Form_default","Row","Col_default","Label","type","value","fromDate","onChange","newFromDate","toDate","newToDate","Group","Control","as","multiple","newCurrencySelected","currencyList","map","i","key","ProfitTable","Table_default","striped","bordered","hover","variant","colSpan","dist_default","format","date","data","buy","currency","price","sell","moment","time","profit","toFixed","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","getCurrencies","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","fetch","sent","json","setState","currencySelected","stop","getProfits","_callee2","postData","_context2","split","join","method","headers","Content-Type","body","JSON","stringify","_ref3","_callee3","e","_context3","target","_x","apply","arguments","_ref4","_callee4","_context4","_x2","_ref5","_callee5","options","values","_context5","Array","from","forEach","selected","push","_x3","_this2","className","Container_default","style","margin","Row_default","dateForm","keys","sm","profitTable","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac13da5e.chunk.js","sourcesContent":["// Import necessary libraries\nimport React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\n// Functional component for dispaying the form\nconst DateForm = (props: any) => {\n\n  return (\n    <form>\n      <Form.Row>\n      <Col>\n      <Form.Label>From Date</Form.Label>\n          <input\n            type=\"date\"\n            value={props.fromDate}\n            onChange={props.newFromDate} />\n      </Col>\n      <Col>\n        <Form.Label>To Date</Form.Label>\n          <input\n            type=\"date\"\n            value={props.toDate}\n            onChange={props.newToDate} />\n      </Col>\n      <Col>\n        <Form.Group>\n          <Form.Label>Currencies</Form.Label>\n            <Form.Control  as=\"select\" multiple onChange={props.newCurrencySelected}>\n            {props.currencyList.map((a: string, i: number) =>\n            <option key={i}>{a}</option>\n            )}\n            </Form.Control>\n        </Form.Group>\n      </Col>\n      </Form.Row>\n    </form>\n  )\n}\n// Export the component as the default object\nexport default DateForm;\n","// Import necessary libraries\nimport React from 'react';\nimport Table from 'react-bootstrap/Table'\nimport Moment from 'react-moment'\nimport moment from 'moment'\n// Functional component for dispaying the profit data\nconst ProfitTable = (props: any) => {\n  return (\n    <div>\n      <Table striped bordered hover variant=\"dark\">\n        <tbody>\n          <tr><td colSpan={2}><Moment format=\"DD-MMMM-YY\" date={props.data.buy.date}/></td></tr>\n          <tr><th colSpan={2}>{props.currency}</th></tr>\n          <tr><td>Buy</td><td>Sell</td></tr>\n          <tr><td>${props.data.buy.price}</td><td>${props.data.sell.price}</td></tr>\n          <tr><td><Moment format=\"hh:mma\" date={moment(props.data.buy.time, \"HHmm\")}/></td><td><Moment format=\"hh:mm a\" date={moment(props.data.sell.time, \"HHmm\")}/></td></tr>\n          <tr><td colSpan={2}>Profit: ${props.data.profit.toFixed(2)}</td></tr>\n        </tbody>\n      </Table>\n    </div>\n  )\n}\n// Export the component as the default object\nexport default ProfitTable;\n","// Import necessary libraries\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport DateForm from './dateForm';\nimport ProfitTable from './profitTable';\nimport './App.css';\n\n// Class component for holding the application state\nclass App extends Component {\n  state: any\n  // Initialise state\n  constructor(props: any){\n    super(props)\n    this.state= {\n      fromDate: '2018-05-07',\n      toDate: '2018-05-08',\n      profit: [],\n      currencyList: [],\n      currencySelected: []\n    };\n  }\n  // Fetch the currency name list and the profits for that list once the component is mounted\n  async componentDidMount () {\n    await this.getCurrencies();\n    this.getProfits();\n  }\n  // Async function for fetching the currency name list\n  getCurrencies = async () =>{\n    let data: any = await fetch('/api/currencies');\n    data = await data.json();\n    this.setState({currencyList: data, currencySelected: data})\n  }\n  // Async function for fetching profits for a given currency list and day interval\n  getProfits = async () =>{\n    const postData = {\n      fromDate: this.state.fromDate.split('-').join(''),\n      toDate: this.state.toDate.split('-').join(''),\n      currencySelected: this.state.currencySelected\n    }\n    let data: any = await fetch('/api/profits', {\n      method: \"POST\",\n      headers: {\"Content-Type\": \"application/json\"},\n      body: JSON.stringify(postData), // body data type must match \"Content-Type\" header\n    });\n    data = await data.json();\n    this.setState({profit: data})\n  }\n  // Function for handleing onChange of the fromDate input field\n  newFromDate = async (e: any)=>{\n    await this.setState({ fromDate: e.target.value })\n    this.getProfits();\n  }\n  // Function for handleing onChange of the toDate input field\n  newToDate = async (e: any)=>{\n    await this.setState({ toDate: e.target.value })\n    this.getProfits();\n  }\n  // Function for handleing onChange of the currency select input field\n  newCurrencySelected = async (e: any)=>{\n    const options = e.target.options;\n    const values: Array<string> = [];\n    Array.from(options).forEach((a: any) => {\n      if(a.selected)\n      values.push(a.value);\n    })\n    await this.setState({ currencySelected: values });\n    this.getProfits();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Container>\n            <h1 style={{margin: '50px'}}>Currency Analyser</h1>\n          </Container>\n          <Container>\n            <Row>\n              <DateForm\n                newFromDate={this.newFromDate}\n                newToDate={this.newToDate}\n                fromDate={this.state.fromDate}\n                toDate={this.state.toDate}\n                currencyList={this.state.currencyList}\n                newCurrencySelected={this.newCurrencySelected}\n              />\n            </Row>\n          </Container>&nbsp;&nbsp;\n          <Container>\n            <Row className=\"justify-content-md-center\">\n            {Object.keys(this.state.profit).map(\n              (currency: any, i: any)=>{\n                return(\n                  <Col key={i} sm=\"4\">\n                    <ProfitTable\n\n                      data={this.state.profit[currency]}\n                      currency={currency}\n                    />\n                  </Col>\n                )\n              }\n            )}\n            </Row>\n          </Container>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}